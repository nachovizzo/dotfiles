#!/bin/bash
set -ex

command_exists() {
  command -v "$@" >/dev/null 2>&1
}

user_can_sudo() {
  command_exists sudo || return 1
  ! LANG= sudo -n -v 2>&1 | grep -q "may not run sudo"
}

RUN=$(user_can_sudo && echo "sudo" || echo "command")

install_zsh() {
  brew install curl zsh

  # Install ohmyzsh
  export CHSH=no
  export KEEP_ZSHRC=yes
  export RUNZSH=no
  ZSH= sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" || true
  # FIXME: Get rid of thi RUN
  $RUN chsh -s "$(which zsh)" "$USER" 2>/dev/null || chsh -s "$(which zsh)"

  # Install zsh-autosuggestions custom plugin
  git clone --depth 1 \
    https://github.com/zsh-users/zsh-autosuggestions \
    ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions 2>/dev/null || true

  # Copy custom configuration to the oh my sh installation
  cp -r $HOME/.oh-my-zsh-custom/* ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/
}

install_nodejs() {
  # Do not re-install
  command_exists node && command_exists npm && return 0 || echo "Installing nodejs"

  # If we reach this poing either node or npm are not there, then install:
  install_pkgs node

  # Create non-sudo installations of nodejs packages
  mkdir -p ${HOME}/.npm-packages
  npm config set prefix ${HOME}/.npm-packages
}

install_coc_extensions() {
  mkdir -p ~/.config/coc/extensions && cd ~/.config/coc/extensions
  if [ ! -f package.json ]; then
    echo '{"dependencies":{}}' >package.json
  fi
  COC_EXTENSIONS=$(nvim --headless -c 'echo coc_global_extensions' +qa 2>&1 | awk -v RS="'" '!(NR%2)')
  echo "Installing coc extensions: ${COC_EXTENSIONS}"
  # FIXME:
  # npm install $(echo $COC_EXTENSIONS) --global-style --ignore-scripts --no-bin-links --no-package-lock --only=prod
}

install_neovim() {
  brew install nvim

  # Install vim-plug packages
  nvim --headless -u $HOME/.vim/config/plug.vim +PlugInstall +qall

  # Install coc-nvim plugins:
  # neovim-coc relies on nodejs, install only if not there
  install_nodejs

  # Manually install coc-extensions(https://github.com/neoclide/coc.nvim/issues/118)
  install_coc_extensions
}

install_python() {
  brew install python
  python3 -m pip install --user --upgrade pip
  python3 -m pip install ipython ipdb black
}

install_brew_packages() {
  brew install \
    ag \
    binutils \
    git-lfs \
    htop \
    openssh \
    sshfs \
    tig \
    tmux \
    tmuxinator \
    tree \
    wget
}

install_fonts() {
  # I have my own SF-Mono patched fonts, but just in case install powerline packaged fonts
  install_pkgs fonts-powerline
  fc-cache -f -v
}

# Options
DECRYPT=${DECRYPT:-yes}

main() {
  # check brew exists, otherwise this script is useless
  command_exists brew || return 1

  echo "Updating the yadm repo origin URL"
  yadm remote set-url origin "git@github.com:nachovizzo/dotfiles.git"

  cd "$HOME"

  install_zsh
  install_neovim
  install_python
  install_brew_packages

  # FIXME
  # brew install llvm
  # install_fonts

  if [ $DECRYPT = yes ]; then
    echo "Loading encrypted files"
    yadm decrypt
  else
    echo "Skipping encrypted files, as requested"
  fi

}

main "$@"
