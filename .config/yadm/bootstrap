#!/bin/bash
set -e

command_exists() {
  command -v "$@" >/dev/null 2>&1
}

user_can_sudo() {
  command_exists sudo || return 1
  ! LANG= sudo -n -v 2>&1 | grep -q "may not run sudo"
}

install_pkgs() {
  $RUN apt install --no-install-recommends -y "$@"
}

install_zsh() {
  install_pkgs curl zsh

  # Install ohmyzsh
  export CHSH=no
  export KEEP_ZSHRC=yes
  export RUNZSH=no
  ZSH= sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" || true
  $RUN chsh -s "$(which zsh)" "$USER" 2>/dev/null || chsh -s "$(which zsh)"

  # Install zsh-autosuggestions custom plugin
  git clone --depth 1 \
    https://github.com/zsh-users/zsh-autosuggestions \
    ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions 2>/dev/null || true

  # Copy custom configuration to the oh my sh installation
  cp -r $HOME/.oh-my-zsh-custom/* ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/
}

install_nodejs() {
  # Do not re-install
  command_exists node && command_exists npm && return 0 || echo "Installing nodejs"

  # If we reach this poing either node or npm are not there, then install:
  curl -sL install-node.vercel.app/lts | $RUN bash -s -- --yes

  # Create non-sudo installations of nodejs packages
  mkdir -p ${HOME}/.npm-packages
  npm config set prefix ${HOME}/.npm-packages
}

install_coc_extensions() {
  mkdir -p ~/.config/coc/extensions && cd ~/.config/coc/extensions
  if [ ! -f package.json ]; then
    echo '{"dependencies":{}}' >package.json
  fi
  COC_EXTENSIONS=$(nvim --headless -c 'echo coc_global_extensions' +qa 2>&1 | awk -v RS="'" '!(NR%2)')
  echo "Installing coc extensions: ${COC_EXTENSIONS}"
  npm install $(echo $COC_EXTENSIONS) --global-style --ignore-scripts --no-bin-links --no-package-lock --only=prod
}

install_neovim() {
  mkdir -p $HOME/.local/bin
  CUSTOM_NVIM_PATH=$HOME/.local/bin/nvim

  wget -c https://github.com/neovim/neovim/releases/download/v0.9.1/nvim.appimage
  chmod u+x nvim.appimage
  mv nvim.appimage $CUSTOM_NVIM_PATH

  $RUN update-alternatives --install /usr/bin/ex ex "${CUSTOM_NVIM_PATH}" 110
  $RUN update-alternatives --install /usr/bin/vi vi "${CUSTOM_NVIM_PATH}" 110
  $RUN update-alternatives --install /usr/bin/view view "${CUSTOM_NVIM_PATH}" 110
  $RUN update-alternatives --install /usr/bin/vim vim "${CUSTOM_NVIM_PATH}" 110
  $RUN update-alternatives --install /usr/bin/vimdiff vimdiff "${CUSTOM_NVIM_PATH}" 110

  # Install vim-plug packages
  nvim --headless -u $HOME/.vim/config/plug.vim +PlugInstall +qall

  # Install coc-nvim plugins:
  # neovim-coc relies on nodejs, install only if not there
  install_nodejs

  # Manually install coc-extensions(https://github.com/neoclide/coc.nvim/issues/118)
  install_coc_extensions
}

install_python() {
  install_pkgs python3 python3-pip python3-dev python-is-python3
  python3 -m pip install --user --upgrade pip
  pip install ipython ipdb black
}

install_build_utils() {
  install_pkgs build-essential cmake cmake-curses-gui
}

install_cpp_utils() {
  install_pkgs clang-format clangd
}

install_shell_utils() {
  install_pkgs htop silversearcher-ag tree tig
  pip3 install thefuck
}

install_tmux() {
  install_pkgs tmux tmuxinator
}

install_essential_tools() {
  install_pkgs git-lfs wget binutils less xdg-utils
}

install_ssh() {
  install_pkgs openssh-client openssh-server sshfs
}

install_fonts() {
  # I have my own SF-Mono patched fonts, but just in case install powerline packaged fonts
  install_pkgs fonts-powerline
  fc-cache -f -v
}

# Options
RUN=$(user_can_sudo && echo "sudo" || echo "command")
DECRYPT=${DECRYPT:-yes}

main() {
  echo "Updating the yadm repo origin URL"
  yadm remote set-url origin "git@github.com:nachovizzo/dotfiles.git"

  cd "$HOME"

  $RUN apt update

  install_essential_tools
  install_zsh
  install_neovim
  install_tmux
  install_fonts
  install_python
  install_build_utils
  install_cpp_utils
  install_shell_utils
  install_ssh

  if [ $DECRYPT = yes ]; then
    echo "Loading encrypted files"
    yadm decrypt
  else
    echo "Skipping encrypted files, as requested"
  fi

}

main "$@"
