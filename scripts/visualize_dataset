#!/usr/bin/env python3
from functools import partial
from functools import lru_cache
import glob
import os

import click
from natsort import natsorted
import numpy as np
import open3d as o3d
from tqdm import tqdm


@lru_cache()
def read_geometry(filename):
    if os.path.splitext(filename)[-1] == ".bin":
        points = np.fromfile(filename, dtype=np.float32).reshape((-1, 4))[:, :3]
    else:
        points = np.asarray(o3d.io.read_point_cloud(filename).points, dtype=np.float64)
    return o3d.utility.Vector3dVector(points.astype(np.float64))


class Visualizer:
    def __init__(self, filenames, jump: int = 0):
        # Files to render
        self.files = filenames
        self.n_frames = len(filenames)
        self.idx = jump
        self.frame = o3d.geometry.PointCloud()

        # Visualizer
        self.vis = o3d.visualization.VisualizerWithKeyCallback()
        self._initialize_visualizer()
        self._register_key_callbacks()

        # Initialize GUI controls
        self.flag_exit = False
        self.flag_play = False

        # Status bar
        self.pbar = tqdm(total=self.n_frames)

    def _initialize_visualizer(self):
        self.vis.create_window(
            window_name="Dataset Visualizer", width=1920, height=1080
        )
        self.frame.points = read_geometry(self.files[self.idx])
        self.vis.add_geometry(self.frame)
        print(100 * "=")
        print(f"Visualizing {len(self.files)} models")
        print(
            "Dataset Visualizer initialized. Press:\n"
            "\t[SPACE] to pause/start\n"
            "\t  [ESC] to exit\n"
            "\t    [N] to step to next frame\n"
            "\t    [P] to step to prev frame\n"
            "\t    [W] to toggle a white background\n"
            "\t    [B] to toggle a black background"
        )
        print(100 * "=")

    def next_frame(self, vis):
        self.idx = (self.idx + 1) % self.n_frames
        self.update_geometry()
        self.pbar.update() if self.pbar else None
        self.pbar.set_description(f"Visualizing {self.files[self.idx]}")
        return False

    def prev_frame(self, vis):
        self.idx = (self.idx - 1) % self.n_frames
        self.update_geometry()
        self.pbar.update() if self.pbar else None
        self.pbar.set_description(f"Visualizing {self.files[self.idx]}")
        return False

    def start_stop(self, vis):
        self.flag_play = not self.flag_play
        return False

    def update_geometry(self):
        self.frame.points = read_geometry(self.files[self.idx])
        self.vis.update_geometry(self.frame)
        self.vis.poll_events()
        self.vis.update_renderer()

    def register_key_callback(self, key, callback):
        self.vis.register_key_callback(ord(str(key)), partial(callback))

    def set_white_background(self, vis):
        self.vis.get_render_option().background_color = [1.0, 1.0, 1.0]

    def set_black_background(self, vis):
        self.vis.get_render_option().background_color = [0.0, 0.0, 0.0]

    def _register_key_callbacks(self):
        self.register_key_callback("Ä€", self.quit)
        self.register_key_callback("Q", self.quit)
        self.register_key_callback("\x1b", self.quit)
        self.register_key_callback("W", self.set_white_background)
        self.register_key_callback("B", self.set_black_background)
        self.register_key_callback(" ", self.start_stop)
        self.register_key_callback("N", self.next_frame)
        self.register_key_callback("P", self.prev_frame)

    def quit(self, vis):
        self.flag_exit = True
        return False

    def run(self):
        while self.pbar.n < self.n_frames and not self.flag_exit:
            self.next_frame(self.vis) if self.flag_play else None
            self.vis.poll_events()
            self.vis.update_renderer()
        self.vis.destroy_window()


@click.command()
@click.argument("file_patterns", type=str)
@click.option("--jump", "-j", type=int, default=0)
def visualizer(file_patterns, jump):
    files = natsorted(glob.glob(file_patterns))
    Visualizer(files, jump).run()


if __name__ == "__main__":
    visualizer()
